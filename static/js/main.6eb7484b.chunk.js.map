{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","onClick","toggleMode","type","role","id","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","length","defaultProps","title","aboutText","Alert","height","alert","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6eb7484b.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n          <input\r\n            className=\"form-check-input\"\r\n            onClick={props.toggleMode}\r\n            type=\"checkbox\"\r\n            role=\"switch\"\r\n            id=\"flexSwitchCheckDefault\"\r\n          />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n            Enable DarkMode\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string }\r\n\r\nNavbar.defaultProps = {\r\n  title: \"setTitleHere\",\r\n  aboutText: \"About\",\r\n}\r\n","import React, { useState } from \"react\"\r\n\r\nexport default function Textform(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase()\r\n    setText(newText)\r\n    props.showAlert(\"Converted Successfully\", \"success\")\r\n  }\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value)\r\n  }\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase()\r\n    setText(newText)\r\n    props.showAlert(\"Converted Successfully\", \"success\")\r\n  }\r\n  const handleClearClick = () => {\r\n    setText(\"\")\r\n    props.showAlert(\"Cleared Successfully\", \"success\")\r\n  }\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text)\r\n    props.showAlert(\"Copied Successfully\", \"success\")\r\n  }\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/)\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Removed Extra Spaces\", \"success\")\r\n  }\r\n  const [text, setText] = useState(\"\")\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#5d5d5d\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"></textarea>\r\n        </div>\r\n        <button\r\n          className={`btn btn-${props.mode === \"dark\" ? \"secondary\" : \"primary\"} mx-1 my-1`}\r\n          onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.mode === \"dark\" ? \"secondary\" : \"primary\"} mx-1 my-1`}\r\n          onClick={handleLowClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.mode === \"dark\" ? \"secondary\" : \"primary\"} mx-1 my-1`}\r\n          onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className={`btn btn-${props.mode === \"dark\" ? \"secondary\" : \"primary\"} mx-1 my-1`} onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.mode === \"dark\" ? \"secondary\" : \"primary\"} mx-1 my-1`}\r\n          onClick={handleExtraSpace}>\r\n          Remove Extra Space\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {text.split(/\\s+/).filter((element) => {\r\n            return element.length !== 0\r\n          }).length * 0.008}{\" \"}\r\n          Minutes to read the text\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter Your Text\"}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong>{props.alert.msg}</strong>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\"\nimport Navbar from \"./components/Navbar\"\nimport Textform from \"./components/Textform\"\nimport Alert from \"./components/Alert\"\nimport React, { useState } from \"react\"\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500)\n  }\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\")\n      document.body.style.backgroundColor = \"#333\"\n      showAlert(\"Dark Mode has been Enabled\", \"success\")\n    } else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"light Mode has been Enabled\", \"success\")\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"TEXT\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Textform showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}